{
  "Logging": {
    "LogLevel": {
      "Default": "Warning"
    }
  },
  "AllowedHosts": "*",
  // TODO: Connection Pooling Ticket
  // modify the connection string to set the maximum connection pool size.
  // "MongoUri": "mongodb+srv://m220student:m220password@mflix.epver.mongodb.net/myFirstDatabase?retryWrites=true&w=majority&maxPoolSize=50&wTimeoutMS=2500",
  // "MongoUri": "mongodb+srv://m220student:m220student@mflix-12345.mongodb.net/sample_mflix?maxPoolSize=50",
  "MongoUri": "mongodb+srv://mflixAppUser:mflixAppPwd@mflix.epver.mongodb.net/sample_mflix?maxPoolSize=50&wtimeoutMS=2500",
  "JwtAuthentication": {
    "SecurityKey": "ouNtF8Xds1jE55/d+iVZ99u0f2U6lQ+AHdiPFwjVW3o=",
    "ValidAudience": "https://localhost:5000/",
    "ValidIssuer": "https://localhost:5000/"
  }
}

// Final Exam
/**
  1) colElections.Find<BsonDocument>("{ winner_party: "Republican",
      winner_electoral_votes: { "$gte": 160 } }");

  2)  colPhones.UpdateMany(
        Builders<Phone>.Filter.Lt(p => p.SoftwareVersion, 4.0),
        Builders<Phone>.Update.Set(p => p.UpdateRequired, true));
  3)  
*/
